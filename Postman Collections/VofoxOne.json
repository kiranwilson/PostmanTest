{
  "variables": [],
  "info": {
    "name": "VofoxOne",
    "_postman_id": "d31c8d9f-5aef-6747-412f-65eb1a3e08d6",
    "description": "",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "ce3c2d1e-07d2-d192-e70e-ab8ddb00713c",
      "name": "Test Cases",
      "description": "",
      "item": []
    },
    {
      "_postman_id": "7cf06410-4547-5721-0a0a-dcdb7bcec2cf",
      "name": "Post New Departments",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var objec = eval(postman.getEnvironmentVariable(\"globalFunctions\"));",
              "",
              "objec.testcaseStartLog();",
              "objec.testcaseEndLog();",
              "",
              "var body = JSON.parse(request.data);",
              "if(body.DepartmentName==='')",
              "{",
              "    tests[\"Department Name Required\"] = body.DepartmentName = '';",
              "}",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{base_url}}/api/Departments",
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "description": ""
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"DepartmentName\": \"\",\n    \"Description\": \"Test\",\n    \"IsActive\": true,\n    \"lstSubDepartment\": null\n}\n"
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "17a07f05-a8ca-738c-b6fc-30948d633197",
      "name": "Get All Departments",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "console.log(\"Test\");",
              "",
              "var objec = eval(postman.getEnvironmentVariable(\"globalFunctions\"));",
              "objec.response200();",
              "objec.response401();",
              "objec.testcaseStartLog();",
              "objec.testcaseEndLog();",
              "",
              "",
              "var val = objec.test();",
              "console.log(val);",
              "",
              "tests[\"Return value is equal to 10\"] = val ===10;",
              "",
              ""
            ]
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var value = \"globalFunctions = { testcaseStartLog: function() { console.log(\"+'\"Start\"'+\"); }, testcaseEndLog: function() { console.log(\"+'\"End\"'+\"); }, test:function() {return 10; }, response200: function() { tests[\"+'\"Authorized User\"'+\"] = responseCode.code === 200;}, response401: function() {tests[\"+'\"User without authorization\"'+ \"] = responseCode.code === 401;} }\";",
              "",
              "postman.setEnvironmentVariable(\"globalFunctions\",value);",
              ""
            ]
          }
        }
      ],
      "request": {
        "url": "{{base_url}}/api/Departments",
        "method": "GET",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": []
        },
        "description": ""
      },
      "response": []
    },
    {
      "_postman_id": "b1857c24-2561-c682-9740-636d07c2812b",
      "name": "{{base_url}}/orders",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "var objec = eval(postman.getEnvironmentVariable(\"globalFunctions\"));",
              "",
              "objec.withAuthorization();",
              "objec.withoutAuthorization();",
              ""
            ]
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "//Common methods",
              "var baseMethods = \" baseMethods = { urlSafe: function(data) { return data.replace(/\\\\+/g, '-').replace(/\\\\//g, '_').replace(/\\\\=+$/, ''); }, getReferenceId: function(length) { if (typeof(length) == 'undefined') {length = 8; } var reference_id = ''; var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; for (var i = 0; i < length; i++) { reference_id += chars.charAt(Math.floor(Math.random() * chars.length)); } return reference_id.toUpperCase(); }} \";",
              "",
              "var method2 =\"method2 = { base64Encode: function(data) { data = CryptoJS.enc.Utf8.parse(data); data = CryptoJS.enc.Base64.stringify(data); return data; } , sign: function(header, payload, secretkey) {var data = header + '.' + payload; var hash = CryptoJS.HmacSHA256(data, secretkey); return CryptoJS.enc.Base64.stringify(hash);} } \";",
              "",
              "var method3 =\"method3 = { getHeader: function() { var header = JSON.stringify({ alg: 'HS256', typ: 'JWT' }); return header; }, getPayload: function(apikey) { var payload = {sub: apikey, iat: Math.floor(Date.now() / 1000), jti: Math.floor(Date.now() / 1000), }; var obo = postman.getEnvironmentVariable('obo'); if (obo) {payload.obo = obo;} payload = JSON.stringify(payload); return payload; }}\";",
              "",
              "//Setting environment variables from methods",
              "postman.setEnvironmentVariable(\"baseMethods\",baseMethods);",
              "postman.setEnvironmentVariable(\"method2\",method2);",
              "postman.setEnvironmentVariable(\"method3\",method3);",
              "",
              "//Reading Environment variables",
              "var baseMethods = eval(postman.getEnvironmentVariable(\"baseMethods\"));",
              "var method2 = eval(postman.getEnvironmentVariable(\"method2\"));",
              "var method3 = eval(postman.getEnvironmentVariable(\"method3\"));",
              "",
              "var apikey = postman.getEnvironmentVariable('api_key');",
              "var secretkey = postman.getEnvironmentVariable('secret_key');",
              "",
              "",
              "// Calling common methods from Environment variables",
              "var header = method3.getHeader();",
              "var headerResult = method2.base64Encode(header);",
              "var headerResult1 = baseMethods.urlSafe(headerResult);",
              "var payload = method3.getPayload(apikey);",
              "var payloadResult = method2.base64Encode(payload);",
              "var payloadResult1 = baseMethods.urlSafe(payloadResult);",
              "var signature = method2.sign(headerResult1, payloadResult1, secretkey);",
              "var signatureResult = baseMethods.urlSafe(signature);",
              "var jwt = headerResult1 + '.' + payloadResult1 + '.' + signatureResult;",
              "",
              "//Set the authorization ID",
              "postman.setEnvironmentVariable('authorization', 'Bearer ' + jwt);",
              "",
              "// Set the reference ID.",
              "postman.setEnvironmentVariable('reference_id', baseMethods.getReferenceId());",
              "",
              "//Setting Common test methods",
              "var value = \"globalFunctions = { withAuthorization: function() { tests[\"+'\"Authorized User\"'+\"] = responseCode.code === 200;}, withoutAuthorization: function() {tests[\"+'\"User without authorization\"'+ \"] = responseCode.code === 401;} }\";",
              "",
              "//Setting common test methods as environment variable",
              "postman.setEnvironmentVariable(\"globalFunctions\",value);"
            ]
          }
        }
      ],
      "request": {
        "url": "{{base_url}}/orders",
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "{{authorization}}",
            "description": ""
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": []
        },
        "description": ""
      },
      "response": []
    }
  ]
}